dart {
	partition __dftl_partition_content_type
	partition __dart_singlelinedoc_comment
	partition __dart_multilinedoc_comment
	partition __dart_singleline_comment
	partition __dart_multiline_comment
	partition __dart_string
	rule-damager __dftl_partition_content_type {
		default token dart_default
		token dart_operator
		token dart_bracket
		token dart_keyword_return
		token dart_keyword
		token dart_keyword_1
		token dart_keyword_2
		token dart_builtin_types
		keywords dart_keyword [ "break", "case", "catch", "class", "const", "continue", "default"
			, "do", "else", "enum", "extends", "false", "final", "finally", "for"
			,  "if", "in", "is", "new", "null", "rethrow", "return", "super"
			, "switch", "this", "throw", "true", "try", "var", "void", "while"
			, "with"  ]
		keywords dart_keyword_1 [ "abstract", "as", "assert", "deferred"
			, "dynamic", "export", "external", "factory", "get"
			, "implements", "import", "library", "operator", "part", "set", "static"
			, "typedef" ]
		keywords dart_keyword_2 [ "async", "async*", "await", "sync*", "yield", "yield*" ]
		keywords dart_builtin_types [ "num", "String", "bool", "int", "double", "List", "Map" ]
		whitespace-rule dart_default javawhitespace
		character-rule dart_operator [ ';', '.', '=', '/', '\\', '+', '-', '*', '<', '>', ':', '?', '!', ',', '|', '&', '^', '%', '~' ]
		character-rule dart_bracket [ '(', ')', '{', '}', '[', ']' ]
	}
	rule-damager __dart_singlelinedoc_comment {
		default token dart_doc
		token dart_doc_reference
		single_line dart_doc_reference '[' => ']'
	}
	rule-damager __dart_multilinedoc_comment {
		default token dart_doc
		token dart_doc_reference
		single_line dart_doc_reference '[' => ']'
	}
	rule-damager __dart_singleline_comment {
		default token dart_single_line_comment
	}
	rule-damager __dart_multiline_comment {
		default token dart_multi_line_comment
	}
	rule-damager __dart_string {
		default token dart_string
		token dart_string_inter
		single_line dart_string_inter '${' => '}'
		//TODO We need a $ => IDENTIFIER_CHAR rule
	}
	rule_partitioner {
      single_line __dart_string '"' => '"'
      single_line __dart_string "'" => "'"
      single_line __dart_singlelinedoc_comment '///' => ''
      single_line __dart_singleline_comment '//' => ''
      multi_line __dart_multilinedoc_comment '/**' => '*/'
      multi_line  __dart_multiline_comment '/*' => '*/'
      
    }
} for "text/dart"