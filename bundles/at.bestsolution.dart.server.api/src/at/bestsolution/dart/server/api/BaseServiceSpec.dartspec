package at.bestsolution.dart.server.api

javatype java.lang.String
javatype boolean     
javatype int
javatype java.util.Map
javatype long

enum model.ServerService ( STATUS )

## A directive to begin overlaying the contents of a file. The supplied content will be used for analysis in place of the file contents in the filesystem. 
## If this directive is used on a file that already has a file content overlay, the old overlay is discarded and replaced with the new one. 
cust model.AddContentOverlay extends model.Overlay {
	## The new content of the file.
	java.lang.String content
}

## An indication of an error, warning, or hint that was produced by the analysis. 
cust model.AnalysisError {
	## The severity of the error.
	model.AnalysisErrorSeverity severity
	## The type of the error.
	model.AnalysisErrorType type
	## The location associated with the error.
	model.Location location
	## The message to be displayed for this error. The message should indicate what is wrong with the code and why it is wrong.
	java.lang.String message
	## The correction message to be displayed for this error. The correction message should indicate how the user can fix the error. The field is omitted if there is no correction message associated with the error code.
	optional java.lang.String correction
}

##  A list of fixes associated with a specific error 
cust model.AnalysisErrorFixes {
	## The error with which the fixes are associated.
	model.AnalysisError error
	## The fixes associated with the error.
	model.SourceChange[] fixes
}

##  An enumeration of the possible severities of analysis errors. 
enum model.AnalysisErrorSeverity ( 
	INFO 
	WARNING 
	ERROR
)

##  An enumeration of the possible types of analysis errors.
enum model.AnalysisErrorType ( 
	CHECKED_MODE_COMPILE_TIME_ERROR 
	COMPILE_TIME_ERROR
	HINT
	LINT
	STATIC_TYPE_WARNING
	STATIC_WARNING
	SYNTACTIC_ERROR
	TODO
)

##  A set of options controlling what kind of analysis is to be performed. If the value of a field is omitted the value of the option will not be changed. 
cust model.AnalysisOptions {
	// Deprecated
	## True if the client wants to enable support for the proposed async feature.
	optional boolean enableAsync

	// Deprecated
	## True if the client wants to enable support for the proposed deferred loading feature.
	optional boolean enableDeferredLoading
	
	// Deprecated
	## True if the client wants to enable support for the proposed enum feature.
	optional boolean enableEnums
    
    ## True if the client wants to enable support for the proposed "null aware operators" feature.
	optional boolean enableNullAwareOperators

	## True if hints that are specific to dart2js should be generated. This option is ignored if generateHints is false. 
	optional boolean generateDart2jsHints

    ## True if hints should be generated as part of generating errors and warnings. 
	optional boolean generateHints

	## True if lints should be generated as part of generating errors and warnings.
    optional boolean generateLints
}

## An enumeration of the services provided by the analysis domain. 
enum model.AnalysisService (
	FOLDING
	HIGHLIGHTS
	INVALIDATE
	NAVIGATION
	OCCURRENCES
	OUTLINE
	OVERRIDES
)

##  An indication of the current state of analysis. 
cust model.AnalysisStatus {
	## True if analysis is currently being performed.
	boolean isAnalyzing
	## The name of the current target of analysis. This field is omitted if analyzing is false.
	java.lang.String analysisTarget
}

## A directive to modify an existing file content overlay. One or more ranges of text are deleted from the old file content overlay and replaced with new text. 
## The edits are applied in the order in which they occur in the list. This means that the offset of each edit must be correct under the assumption that all previous edits have been applied. 
## It is an error to use this overlay on a file that does not yet have a file content overlay or that has had its overlay removed via RemoveContentOverlay. 
## If any of the edits cannot be applied due to its offset or length being out of range, an INVALID_OVERLAY_CHANGE error will be reported. 
cust model.ChangeContentOverlay extends model.Overlay {
	## The edits to be applied to the file.
	model.SourceEdit[] edits
}

## An identifier used to associate completion results with a completion request.
cust model.CompletionId {
	
}

##  A suggestion for how to complete partially entered text. Many of the fields are optional, depending on the kind of element being suggested. 
cust model.CompletionSuggestion {
	## The kind of element being suggested.
	model.CompletionSuggestionKind kind	
	## The relevance of this completion suggestion where a higher number indicates a higher relevance.
	int relevance
    ## The identifier to be inserted if the suggestion is selected. If the suggestion is for a method or function, the client might want to additionally insert a template for the parameters. The information required in order to do so is contained in other fields. 
	java.lang.String completion
	## The offset, relative to the beginning of the completion, of where the selection should be placed after insertion.     
	int selectionOffset
	## The number of characters that should be selected after insertion.     
	int selectionLength
	## True if the suggested element is deprecated. 
	boolean isDeprecated
	## True if the element is not known to be valid for the target. This happens if the type of the target is dynamic. 
	boolean isPotential
	## An abbreviated version of the Dartdoc associated with the element being suggested, This field is omitted if there is no Dartdoc associated with the element.    
	optional java.lang.String docSummary
	## The Dartdoc associated with the element being suggested, This field is omitted if there is no Dartdoc associated with the element.
	optional java.lang.String docComplete
	## The class that declares the element being suggested. This field is omitted if the suggested element is not a member of a class. 
	optional java.lang.String declaringType
	## Information about the element reference being suggested.
	optional model.Element element
	## The return type of the getter, function or method or the type of the field being suggested. This field is omitted if the suggested element is not a getter, function or method.
	optional java.lang.String returnType
	## The names of the parameters of the function or method being suggested. This field is omitted if the suggested element is not a setter, function or method.
	optional java.lang.String[] parameterNames
	## The types of the parameters of the function or method being suggested. This field is omitted if the parameterNames field is omitted.
	optional java.lang.String[] parameterTypes
	## The number of required parameters for the function or method being suggested. This field is omitted if the parameterNames field is omitted.
	optional int requiredParameterCount
	## True if the function or method being suggested has at least one named parameter. This field is omitted if the parameterNames field is omitted.
	optional boolean hasNamedParameters
	## The name of the optional parameter being suggested. This field is omitted if the suggestion is not the addition of an optional argument within an argument list.
	optional java.lang.String parameterName
	## The type of the options parameter being suggested. This field is omitted if the parameterName field is omitted.
	optional java.lang.String parameterType
	## The import to be added if the suggestion is out of scope and needs an import to be added to be in scope.
	optional java.lang.String importUri
}

##  An enumeration of the kinds of elements that can be included in a completion suggestion. 
enum model.CompletionSuggestionKind (
	## A list of arguments for the method or function that is being invoked. For this suggestion kind, the completion field is a textual representation of the invocation and the parameterNames, parameterTypes, and requiredParameterCount attributes are defined.
	ARGUMENT_LIST
	IMPORT
	## The element identifier should be inserted at the completion location. For example "someMethod" in import 'myLib.dart' show someMethod; . For suggestions of this kind, the element attribute is defined and the completion field is the element's identifier.
	IDENTIFIER
	## The element is being invoked at the completion location. For example, "someMethod" in x.someMethod(); . For suggestions of this kind, the element attribute is defined and the completion field is the element's identifier.
	INVOCATION
	## A keyword is being suggested. For suggestions of this kind, the completion is the keyword.
	KEYWORD
	## A named argument for the current callsite is being suggested. For suggestions of this kind, the completion is the named argument identifier including a trailing ':' and space.
	NAMED_ARGUMENT
	OPTIONAL_ARGUMENT
	PARAMETER
)

##  Information about an element (something that can be declared in code). 
cust model.Element {
	## The kind of the element.
	model.ElementKind kind
	## The name of the element. This is typically used as the label in the outline.
	java.lang.String name
	## The location of the name in the declaration of the element.
	optional model.Location location
	## A bit-map containing the following flags:
    ##    0x01 - set if the element is explicitly or implicitly abstract
    ##    0x02 - set if the element was declared to be ‘const’
    ##    0x04 - set if the element was declared to be ‘final’
    ##    0x08 - set if the element is a static member of a class or is a top-level function or field
    ##    0x10 - set if the element is private
    ##    0x20 - set if the element is deprecated
	int flags
	## The parameter list for the element. If the element is not a method or function this field will not be defined. If the element doesn't have parameters (e.g. getter), this field will not be defined. If the element has zero parameters, this field will have a value of "()".
	optional java.lang.String parameters
	## The return type of the element. If the element is not a method or function this field will not be defined. If the element does not have a declared return type, this field will contain an empty string.
	optional java.lang.String returnType
	## The type parameter list for the element. If the element doesn't have type parameters, this field will not be defined.
	optional java.lang.String typeParameters
}

##  An enumeration of the kinds of elements. 
enum model.ElementKind (
	CLASS
	CLASS_TYPE_ALIAS
	COMPILATION_UNIT
	CONSTRUCTOR
	ENUM
	ENUM_CONSTANT
	FIELD
	FUNCTION
	FUNCTION_TYPE_ALIAS
	GETTER
	LABEL
	LIBRARY
	LOCAL_VARIABLE
	METHOD
	PARAMETER
	PREFIX
	SETTER
	TOP_LEVEL_VARIABLE
	TYPE_PARAMETER
	UNIT_TEST_GROUP
	UNIT_TEST_TEST
	UNKNOWN
)

##  A description of an executable file. 
cust model.ExecutableFile {
	## The path of the executable file.
	model.FilePath file
	## The kind of the executable file.
	model.ExecutableKind kind
}

##  An enumeration of the kinds of executable files. 
enum model.ExecutableKind(
	CLIENT
	EITHER
	NOT_EXECUTABLE
	SERVER
)


## The identifier for a execution context.
cust model.ExecutionContextId {
	
}

##  An enumeration of the services provided by the execution domain. 
enum model.ExecutionService (
	LAUNCH_DATA
)

## The absolute path of a file.
alias model.FilePath as java.lang.String

##  An enumeration of the kinds of folding regions. 
enum model.FoldingKind (
	COMMENT
	CLASS_MEMBER
	DIRECTIVES
	DOCUMENTATION_COMMENT
	TOP_LEVEL_DECLARATION
)

##  A description of a region that can be folded. 
cust model.FoldingRegion {
	## The kind of the region.
	model.FoldingKind kind
	## The offset of the region to be folded.
	int offset
	## The length of the region to be folded.
	int length
}

##  A description of a region that could have special highlighting associated with it. 
cust model.HighlightRegion {
	## The type of highlight associated with the region.
	model.HighlightRegionType type
	## The offset of the region to be highlighted.
	int offset
	## The length of the region to be highlighted.
	int length
}

##  An enumeration of the kinds of highlighting that can be applied to files. 
enum model.HighlightRegionType (
	ANNOTATION
	BUILT_IN
	CLASS
	COMMENT_BLOCK
	COMMENT_DOCUMENTATION
	COMMENT_END_OF_LINE
	CONSTRUCTOR
	DIRECTIVE
	DYNAMIC_TYPE
	ENUM
	ENUM_CONSTANT
	FIELD
	FIELD_STATIC
	FUNCTION
	FUNCTION_DECLARATION
	FUNCTION_TYPE_ALIAS
	GETTER_DECLARATION
	IDENTIFIER_DEFAULT
	IMPORT_PREFIX
	KEYWORD
	LABEL
	LITERAL_BOOLEAN
	LITERAL_DOUBLE
	LITERAL_INTEGER
	LITERAL_LIST
	LITERAL_MAP
	LITERAL_STRING
	LOCAL_VARIABLE
	LOCAL_VARIABLE_DECLARATION
	METHOD
	METHOD_DECLARATION
	METHOD_DECLARATION_STATIC
	METHOD_STATIC
	PARAMETER
	SETTER_DECLARATION
	TOP_LEVEL_VARIABLE
	TYPE_NAME_DYNAMIC
	TYPE_PARAMETER
)

##  The hover information associated with a specific location. 
cust model.HoverInformation {
	## The offset of the range of characters that encompases the cursor position and has the same hover information as the cursor position.
	int offset
	## The length of the range of characters that encompases the cursor position and has the same hover information as the cursor position.
	int length
	## The path to the defining compilation unit of the library in which the referenced element is declared. This data is omitted if there is no referenced element, or if the element is declared inside an HTML file.
	optional java.lang.String containingLibraryPath
	## The name of the library in which the referenced element is declared. This data is omitted if there is no referenced element, or if the element is declared inside an HTML file.
	optional java.lang.String containingLibraryName
	## A human-readable description of the class declaring the element being referenced. This data is omitted if there is no referenced element, or if the element is not a class member.
	optional java.lang.String containingClassDescription
	## The dartdoc associated with the referenced element. Other than the removal of the comment delimiters, including leading asterisks in the case of a block comment, the dartdoc is unprocessed markdown. This data is omitted if there is no referenced element, or if the element has no dartdoc.
	optional java.lang.String dartdoc
	## A human-readable description of the element being referenced. This data is omitted if there is no referenced element.
	optional java.lang.String elementDescription
	## A human-readable description of the kind of element being referenced (such as “class” or “function type alias”). This data is omitted if there is no referenced element.
	optional java.lang.String elementKind
	## A human-readable description of the parameter corresponding to the expression being hovered over. This data is omitted if the location is not in an argument to a function.
	optional java.lang.String parameter
	## The name of the propagated type of the expression. This data is omitted if the location does not correspond to an expression or if there is no propagated type information.
	optional java.lang.String propagatedType
	## The name of the static type of the expression. This data is omitted if the location does not correspond to an expression.
	optional java.lang.String staticType
}

##  A collection of positions that should be linked (edited simultaneously) for the purposes of updating code after a source change. For example, if a set of edits introduced a new variable name, the group would contain all of the positions of the variable name so that if the client wanted to let the user edit the variable name after the operation, all occurrences of the name could be edited simultaneously. 
cust model.LinkedEditGroup {
	## The positions of the regions that should be edited simultaneously.
	model.Position[] positions
	## The length of the regions that should be edited simultaneously.
	int length
	## Pre-computed suggestions for what every region might want to be changed to.
	model.LinkedEditSuggestion[] suggestions
}
 
##  A suggestion of a value that could be used to replace all of the linked edit regions in a LinkedEditGroup. 
cust model.LinkedEditSuggestion {
	## The value that could be used to replace all of the linked edit regions.
	java.lang.String value
	## The kind of value being proposed.
	model.LinkedEditSuggestionKind kind
}

##  An enumeration of the kind of values that can be suggested for a linked edit. 
enum model.LinkedEditSuggestionKind (
	METHOD
	PARAMETER
	TYPE
	VARIABLE
)

##  A location (character range) within a file. 
cust model.Location {
	## The file containing the range.
	model.FilePath file
	## The offset of the range.
	int offset
	## The length of the range.
	int length
	## The one-based index of the line containing the first character of the range.
	int startLine
	## The one-based index of the column containing the first character of the range.
	int startColumn
}

##  A description of a region from which the user can navigate to the declaration of an element. 
cust model.NavigationRegion {
	## The offset of the region from which the user can navigate.
	int offset
	## The length of the region from which the user can navigate.
	int length
	## The indexes of the targets (in the enclosing navigation response) to which the given region is bound. By opening the target, clients can implement one form of navigation.
	int[] targets
}

##  A description of a target to which the user can navigate. 
cust model.NavigationTarget {
	## The kind of the element.
	model.ElementKind kind
	## The index of the file (in the enclosing navigation response) to navigate to.
	int fileIndex
	## The offset of the region from which the user can navigate.
	int offset
	## The length of the region from which the user can navigate.
	int length
	## The one-based index of the line containing the first character of the region.
	int startLine
	## The one-based index of the column containing the first character of the region.
	int startColumn
}

##  A description of the references to a single element within a single file. 
cust model.Occurrences {
	## The element that was referenced.
	model.Element element
	## The offsets of the name of the referenced element within the file.
	int[] offsets
	## The length of the name of the referenced element.
	int length
}

##  An node in the outline structure of a file. 
cust model.Outline {
	## A description of the element represented by this node.
	model.Element element
	## The offset of the first character of the element. This is different than the offset in the Element, which if the offset of the name of the element. It can be used, for example, to map locations in the file back to an outline.
	int offset
	## The length of the element.
	int length
	## The children of the node. The field will be omitted if the node has no children.
	optional model.Outline[] children
}

##  A description of a member that overrides an inherited member. 
cust model.Override {
	## The offset of the name of the overriding member.
	int offset
	## The length of the name of the overriding member.
	int length
	## The member inherited from a superclass that is overridden by the overriding member. The field is omitted if there is no superclass member, in which case there must be at least one interface member.
	optional model.OverriddenMember superclassMember
	## The members inherited from interfaces that are overridden by the overriding member. The field is omitted if there are no interface members, in which case there must be a superclass member.
	optional model.OverriddenMember[] interfaceMembers
}

##  A description of a member that is being overridden. 
cust model.OverriddenMember {
	## The element that is being overridden.
	model.Element element
	## The name of the class in which the member is defined.
	java.lang.String className
}

##  A position within a file. 
cust model.Position {
	## The file containing the position.
	model.FilePath file
	## The offset of the position.
	int offset
}

##  An indication of the current state of pub execution. 
cust model.PubStatus {
	## True if the server is currently running pub to produce a list of package directories.
	boolean isListingPackageDirs
}

##  An enumeration of the kinds of refactorings that can be created. 
enum model.RefactoringKind (
	CONVERT_GETTER_TO_METHOD
	CONVERT_METHOD_TO_GETTER
	EXTRACT_LOCAL_VARIABLE
	EXTRACT_METHOD
	INLINE_LOCAL_VARIABLE
	INLINE_METHOD
	MOVE_FILE
	RENAME
	SORT_MEMBERS
)

##  A description of a parameter in a method refactoring. 
cust model.RefactoringMethodParameter {
	## The unique identifier of the parameter. Clients may omit this field for the parameters they want to add.
	optional java.lang.String id
	## The kind of the parameter.
	model.RefactoringMethodParameterKind kind
	## The type that should be given to the parameter, or the return type of the parameter's function type.
	java.lang.String type
	## The name that should be given to the parameter.
	java.lang.String name
	## The parameter list of the parameter's function type. If the parameter is not of a function type, this field will not be defined. If the function type has zero parameters, this field will have a value of "()".
	optional java.lang.String parameters	
}

##  An abstract superclass of all refactoring feedbacks. 
cust model.RefactoringFeedback {
	
}

##  An abstract superclass of all refactoring options. 
cust model.RefactoringOptions {
	
}

##  An enumeration of the kinds of parameters. 
enum model.RefactoringMethodParameterKind (
	REQUIRED
	POSITIONAL
	NAMED
)

## A description of a problem related to a refactoring. 
cust model.RefactoringProblem {
	## The severity of the problem being represented.
	model.RefactoringProblemSeverity severity
	## A human-readable description of the problem being represented.
	java.lang.String message
	## The location of the problem being represented. This field is omitted unless there is a specific location associated with the problem (such as a location where an element being renamed will be shadowed).
	optional model.Location location	
}

## An enumeration of the severities of problems that can be returned by the refactoring requests. 
enum model.RefactoringProblemSeverity (
	INFO
	WARNING
	ERROR
	FATAL
)

## A directive to remove an existing file content overlay. After processing this directive, the file contents will once again be read from the file system.
## If this directive is used on a file that doesn't currently have a content overlay, it has no effect.  
cust model.RemoveContentOverlay extends model.Overlay {
	
}

##  An indication of a problem with the execution of the server, typically in response to a request. 
cust model.RequestError {
	## A code that uniquely identifies the error that occurred.
	model.RequestErrorCode code
	## A short description of the error.
	java.lang.String message
	## The stack trace associated with processing the request, used for debugging the server.
	optional java.lang.String stackTrace
}

##  An enumeration of the types of errors that can occur in the execution of the server. 
enum model.RequestErrorCode (
	## An "analysis.getErrors" or "analysis.getNavigation" request could not be satisfied because the content of the file changed before the requested results could be computed.
	CONTENT_MODIFIED
	## An "edit.format" request specified a FilePath which does not match a Dart file in an analysis root.
	FORMAT_INVALID_FILE
	## An "edit.format" request specified a file that contains syntax errors.
	FORMAT_WITH_ERRORS
	## An "analysis.getErrors" request specified a FilePath which does not match a file currently subject to analysis.
	GET_ERRORS_INVALID_FILE
	## A path passed as an argument to a request (such as analysis.reanalyze) is required to be an analysis root, but isn't.
	INVALID_ANALYSIS_ROOT
	## The context root used to create an execution context does not exist.
	INVALID_EXECUTION_CONTEXT
	## An "analysis.updateContent" request contained a ChangeContentOverlay object which can't be applied, due to an edit having an offset or length that is out of range.
	INVALID_OVERLAY_CHANGE
	## One of the method parameters was invalid.
	INVALID_PARAMETER
	## A malformed request was received.
	INVALID_REQUEST
	## The "--no-index" flag was passed when the analysis server created, but this API call requires an index to have been generated.
	NO_INDEX_GENERATED
	## Another refactoring request was received during processing of this one.
	REFACTORING_REQUEST_CANCELLED
	##  The analysis server has already been started (and hence won't accept new connections). 
	##  This error is included for future expansion; at present the analysis server can only speak to one client at a time so this error will never occur. 
	SERVER_ALREADY_STARTED
	## An internal error occurred in the analysis server. Also see the server.error notification.
	SERVER_ERROR
	## An "edit.sortMembers" request specified a FilePath which does not match a Dart file in an analysis root.
	SORT_MEMBERS_INVALID_FILE
	## An "edit.sortMembers" request specified a Dart file that has scan or parse errors.
	SORT_MEMBERS_PARSE_ERRORS
	##  An "analysis.setPriorityFiles" request includes one or more files that are not being analyzed. 
	##  This is a legacy error; it will be removed before the API reaches version 1.0. 
	UNANALYZED_PRIORITY_FILES
	## A request was received which the analysis server does not recognize, or cannot handle in its current configuation.
	UNKNOWN_REQUEST
	## The analysis server was requested to perform an action on a source that does not exist.
	UNKNOWN_SOURCE
	##  The analysis server was requested to perform an action which is not supported. 
	##  This is a legacy error; it will be removed before the API reaches version 1.0. 
	UNSUPPORTED_FEATURE
)

## An identifier used to associate search results with a search request.
cust model.SearchId {

}

##  A single result from a search request. 
cust model.SearchResult {
	## The location of the code that matched the search criteria.
	model.Location location
	## The kind of element that was found or the kind of reference that was found.
	model.SearchResultKind kind
	## True if the result is a potential match but cannot be confirmed to be a match. For example, if all references to a method m defined in some class were requested, and a reference to a method m from an unknown class were found, it would be marked as being a potential match.
	boolean isPotential
	## The elements that contain the result, starting with the most immediately enclosing ancestor and ending with the library.
	model.Element[] path
}

##  An enumeration of the kinds of search results returned by the search domain. 
enum model.SearchResultKind (
	## The declaration of an element.
	DECLARATION
	## The invocation of a function or method.
	INVOCATION
	## A reference to a field, parameter or variable where it is being read.
	READ
	## A reference to a field, parameter or variable where it is being read and written.
	READ_WRITE
	## A reference to an element.
	REFERENCE
	## Some other kind of search result.
	UNKNOWN
	## A reference to a field, parameter or variable where it is being written.
	WRITE
)

##  An enumeration of the services provided by the server domain. 
enum model.ServerService (
	STATUS
)

##  A description of a set of edits that implement a single conceptual change. 
cust model.SourceChange {
	## A human-readable description of the change to be applied.
	java.lang.String message
	## A list of the edits used to effect the change, grouped by file.
	model.SourceFileEdit[] edits
	## A list of the linked editing groups used to customize the changes that were made.
	model.LinkedEditGroup[] linkedEditGroups
	## The position that should be selected after the edits have been applied.
	optional model.Position selection
}

##  A description of a single change to a single file. 
cust model.SourceEdit {
	## The offset of the region to be modified.
	int offset
	## The length of the region to be modified.
	int length
	## The code that is to replace the specified region in the original code.
	java.lang.String replacement
	## An identifier that uniquely identifies this source edit from other edits in the same response. This field is omitted unless a containing structure needs to be able to identify the edit for some reason.
	## For example, some refactoring operations can produce edits that might not be appropriate (referred to as potential edits). Such edits will have an id so that they can be referenced. Edits in the same response that do not need to be referenced will not have an id. 
	optional java.lang.String id
}

##  A description of a set of changes to a single file. 
cust model.SourceFileEdit {
	## The file containing the code to be modified.
	model.FilePath file
	## The modification stamp of the file at the moment when the change was created, in milliseconds since the "Unix epoch". Will be -1 if the file did not exist and should be created. The client may use this field to make sure that the file was not changed since then, so it is safe to apply the change.
	long fileStamp
	## A list of the edits used to effect the change.
	model.SourceEdit[] edits
}

##  A representation of a class in a type hierarchy. 
cust model.TypeHierarchyItem {
	## The class element represented by this item.
	model.Element classElement
	## The name to be displayed for the class. This field will be omitted if the display name is the same as the name of the element. The display name is different if there is additional type information to be displayed, such as type arguments.
	optional java.lang.String displayName
	## The member in the class corresponding to the member on which the hierarchy was requested. This field will be omitted if the hierarchy was not requested for a member or if the class does not have a corresponding member.
	optional model.Element memberElement
	## The index of the item representing the superclass of this class. This field will be omitted if this item represents the class Object.
	optional int superclass
	## The indexes of the items representing the interfaces implemented by this class. The list will be empty if there are no implemented interfaces.
	int[] interfaces
	## The indexes of the items representing the mixins referenced by this class. The list will be empty if there are no classes mixed in to this class.
	int[] mixins
	## The indexes of the items representing the subtypes of this class. The list will be empty if there are no subtypes or if this item represents a supertype of the pivot type.
	int[] subclasses
}

## 
cust model.Overlay {
	
}

service server {
	
	## Return the version number of the analysis server.
	request getVersion 
		returns 
		## The version number of the analysis server.
		java.lang.String version
	
	## Cleanly shutdown the analysis server. 
	## Requests that are received after this request will not be processed. 
	## Requests that were received before this request, but for which a response has not yet been sent, will not be responded to. 
	## No further responses or notifications will be sent after the response to this request has been sent. 
	request shutdown returns void
	
	## Subscribe for services. All previous subscriptions are replaced by the given set of services.
	## It is an error if any of the elements in the list are not valid services. 
	## If there is an error, then the current subscriptions will remain unchanged. 
	request setSubscriptions (
		## A list of the services being subscribed to.
		model.ServerService[] subscriptions
	) returns void
	
	
	## Reports that the server is running. This notification is issued once after the server has started running but before any requests are processed to let the client know that it started correctly.
	## It is not possible to subscribe to or unsubscribe from this notification. 
	notification connected (
		## The version number of the analysis server.
		java.lang.String version
	)
	
	## Reports that an unexpected error has occurred while executing the server. This notification is not used for problems with specific requests (which are returned as part of the response) but is used for exceptions that occur while performing other tasks, such as analysis or preparing notifications.
	## It is not possible to subscribe to or unsubscribe from this notification. 
	notification error( 
		## True if the error is a fatal error, meaning that the server will shutdown automatically after sending this notification.
		boolean isFatal 
		## The error message indicating what kind of error was encountered.
		java.lang.String message
		## The stack trace associated with the generation of the error, used for debugging the server.
		java.lang.String stackTrace
	)
	## Reports the current status of the server. Parameters are omitted if there has been no change in the status represented by that parameter.
	## This notification is not subscribed to by default. Clients can subscribe by including the value "STATUS" in the list of services passed in a server.setSubscriptions request. 
	notification status(
		## The current status of analysis, including whether analysis is being performed and if so what is being analyzed.
		optional model.AnalysisStatus analysis
		## The current status of pub execution, indicating whether we are currently running pub.
		optional model.PubStatus pub
	)
	
//	## Reports the current status of the server. Parameters are omitted if there has been no change in the status represented by that parameter.
//	## This notification is not subscribed to by default. Clients can subscribe by including the value "STATUS" in the list of services passed in a server.setSubscriptions request. 
//	notification status (
//		
//	)
}

##  The analysis domain contains API’s related to the analysis of files. 
service analysis {
	## Return the errors associated with the given file. If the errors for the given file have not yet been computed, or the most recently computed errors for the given file are out of date, then the response for this request will be delayed until they have been computed. If some or all of the errors for the file cannot be computed, then the subset of the errors that can be computed will be returned and the response will contain an error to indicate why the errors could not be computed. If the content of the file changes after this request was received but before a response could be sent, then an error of type CONTENT_MODIFIED will be generated.
	## This request is intended to be used by clients that cannot asynchronously apply updated error information. Clients that can apply error information as it becomes available should use the information provided by the 'analysis.errors' notification.
	## If a request is made for a file which does not exist, or which is not currently subject to analysis (e.g. because it is not associated with any analysis root specified to analysis.setAnalysisRoots), an error of type GET_ERRORS_INVALID_FILE will be generated. 
	request getErrors(
		## The file for which errors are being requested.
		model.FilePath file
	) 
		returns 
		## The errors associated with the file.
		model.AnalysisError[] errors
	
	##  Return the hover information associate with the given location. If some or all of the hover information is not available at the time this request is processed the information will be omitted from the response. 
	request getHover(
		## The file in which hover information is being requested.
		model.FilePath file
		## The offset for which hover information is being requested.
		int offset
	) returns
		## The hover information associated with the location. The list will be empty if no information could be determined for the location. The list can contain multiple items if the file is being analyzed in multiple contexts in conflicting ways (such as a part that is included in multiple libraries).
		model.HoverInformation[] hovers
		
	##  Return library dependency information for use in client-side indexing and package URI resolution. 
	request getLibraryDependencies 
		returns
			## A list of the paths of library elements referenced by files in existing analysis roots.
			model.FilePath[] libraries
			## A mapping from context source roots to package maps which map package names to source directories for use in client-side package URI resolution.
			java.util.Map<java.lang.String, java.util.Map<java.lang.String, model.FilePath[]>> packageMap
			
	## Return the navigation information associated with the given region of the given file. If the navigation information for the given file has not yet been computed, or the most recently computed navigation information for the given file is out of date, then the response for this request will be delayed until it has been computed. If the content of the file changes after this request was received but before a response could be sent, then an error of type CONTENT_MODIFIED will be generated.
	## If a navigation region overlaps (but extends either before or after) the given region of the file it will be included in the result. This means that it is theoretically possible to get the same navigation region in response to multiple requests. Clients can avoid this by always choosing a region that starts at the beginning of a line and ends at the end of a (possibly different) line in the file. 
	request getNavigation(
		## The file in which navigation information is being requested.
		model.FilePath file
		## The offset of the region for which navigation information is being requested.
		int offset
		## The length of the region for which navigation information is being requested.
		int length
	) returns
		## A list of the paths of files that are referenced by the navigation targets.
		model.FilePath[] files
		## A list of the navigation targets that are referenced by the navigation regions.
		model.NavigationTarget[] targets
		## A list of the navigation regions within the requested region of the file.
		model.NavigationRegion[] regions
	
	## Force the re-analysis of everything contained in the specified analysis roots. This will cause all previously computed analysis results to be discarded and recomputed, and will cause all subscribed notifications to be re-sent.
	## If no analysis roots are provided, then all current analysis roots will be re-analyzed. If an empty list of analysis roots is provided, then nothing will be re-analyzed. If the list contains one or more paths that are not currently analysis roots, then an error of type INVALID_ANALYSIS_ROOT will be generated. 
	request reanalyze(
		## A list of the analysis roots that are to be re-analyzed.
		optional model.FilePath[] roots
	) returns void
	
	## Sets the root paths used to determine which files to analyze. The set of files to be analyzed are all of the files in one of the root paths that are not either explicitly or implicitly excluded. A file is explicitly excluded if it is in one of the excluded paths. A file is implicitly excluded if it is in a subdirectory of one of the root paths where the name of the subdirectory starts with a period (that is, a hidden directory).
	## Note that this request determines the set of requested analysis roots. The actual set of analysis roots at any given time is the intersection of this set with the set of files and directories actually present on the filesystem. When the filesystem changes, the actual set of analysis roots is automatically updated, but the set of requested analysis roots is unchanged. This means that if the client sets an analysis root before the root becomes visible to server in the filesystem, there is no error; once the server sees the root in the filesystem it will start analyzing it. Similarly, server will stop analyzing files that are removed from the file system but they will remain in the set of requested roots.
	## If an included path represents a file, then server will look in the directory containing the file for a pubspec.yaml file. If none is found, then the parents of the directory will be searched until such a file is found or the root of the file system is reached. If such a file is found, it will be used to resolve package: URI’s within the file. 
	request setAnalysisRoots(
		## A list of the files and directories that should be analyzed.
		model.FilePath[] included
		## A list of the files and directories within the included directories that should not be analyzed.
		model.FilePath[] excluded
		## A mapping from source directories to target directories that should override the normal package: URI resolution mechanism. The analyzer will behave as though each source directory in the map contains a special pubspec.yaml file which resolves any package: URI to the corresponding path within the target directory. The effect is the same as specifying the target directory as a "--package_root" parameter to the Dart VM when executing any Dart file inside the source directory.
		## Files in any directories that are not overridden by this mapping have their package: URI's resolved using the normal pubspec.yaml mechanism. If this field is absent, or the empty map is specified, that indicates that the normal pubspec.yaml mechanism should always be used.
		optional java.util.Map<model.FilePath,model.FilePath> packageRoots
	) returns void
	 
	## Set the priority files to the files in the given list. A priority file is a file that is given priority when scheduling which analysis work to do first. The list typically contains those files that are visible to the user and those for which analysis results will have the biggest impact on the user experience. The order of the files within the list is significant: the first file will be given higher priority than the second, the second higher priority than the third, and so on.
	## Note that this request determines the set of requested priority files. The actual set of priority files is the intersection of the requested set of priority files with the set of files currently subject to analysis. (See analysis.setSubscriptions for a description of files that are subject to analysis.)
	## If a requested priority file is a directory it is ignored, but remains in the set of requested priority files so that if it later becomes a file it can be included in the set of actual priority files.
	request setPriorityFiles(
		## The files that are to be a priority for analysis.
		model.FilePath[] files
	) returns void
	
	## Subscribe for services. All previous subscriptions are replaced by the current set of subscriptions. If a given service is not included as a key in the map then no files will be subscribed to the service, exactly as if the service had been included in the map with an explicit empty list of files.
	## Note that this request determines the set of requested subscriptions. The actual set of subscriptions at any given time is the intersection of this set with the set of files currently subject to analysis. The files currently subject to analysis are the set of files contained within an actual analysis root but not excluded, plus all of the files transitively reachable from those files via import, export and part directives. (See analysis.setAnalysisRoots for an explanation of how the actual analysis roots are determined.) When the actual analysis roots change, the actual set of subscriptions is automatically updated, but the set of requested subscriptions is unchanged.
	## If a requested subscription is a directory it is ignored, but remains in the set of requested subscriptions so that if it later becomes a file it can be included in the set of actual subscriptions.
	## It is an error if any of the keys in the map are not valid services. If there is an error, then the existing subscriptions will remain unchanged. 
	request setSubscriptions(
		## A table mapping services to a list of the files being subscribed to the service.
		java.util.Map<model.AnalysisService, model.FilePath[]> subscriptions
	) returns void
	
	## Update the content of one or more files. Files that were previously updated but not included in this update remain unchanged. This effectively represents an overlay of the filesystem. The files whose content is overridden are therefore seen by server as being files with the given content, even if the files do not exist on the filesystem or if the file path represents the path to a directory on the filesystem. 
	request updateContent (
		## A table mapping the files whose content has changed to a description of the content change.
		java.util.Map<model.FilePath, model.Overlay> files
	)
	returns void 
	
	##  Update the options controlling analysis based on the given set of options. Any options that are not included in the analysis options will not be changed. If there are options in the analysis options that are not valid, they will be silently ignored. 
	request updateOptions(
		## The options that are to be used to control analysis.
		model.AnalysisOptions options
	) returns void
	
	## Reports the errors associated with a given file. The set of errors included in the notification is always a complete list that supersedes any previously reported errors.
	## It is only possible to unsubscribe from this notification by using the command-line flag --no-error-notification. 
	notification errors (
		## The file containing the errors.
		model.FilePath file
		## The errors contained in the file.
		model.AnalysisError[] errors
	)
	## Reports that any analysis results that were previously associated with the given files should be considered to be invalid because those files are no longer being analyzed, either because the analysis root that contained it is no longer being analyzed or because the file no longer exists.
	## If a file is included in this notification and at some later time a notification with results for the file is received, clients should assume that the file is once again being analyzed and the information should be processed.
	## It is not possible to subscribe to or unsubscribe from this notification. 
	notification flushResults (
		## The files that are no longer being analyzed.
		model.FilePath[] files
	)
	
	## Reports the folding regions associated with a given file. Folding regions can be nested, but will not be overlapping. Nesting occurs when a foldable element, such as a method, is nested inside another foldable element such as a class.
	## This notification is not subscribed to by default. Clients can subscribe by including the value "FOLDING" in the list of services passed in an analysis.setSubscriptions request. 
	notification folding(
		## The file containing the folding regions.
		model.FilePath file
		## The folding regions contained in the file.
		model.FoldingRegion regions
	)
	
	## Reports the highlight regions associated with a given file.
	## This notification is not subscribed to by default. Clients can subscribe by including the value "HIGHLIGHTS" in the list of services passed in an analysis.setSubscriptions request. 
	notification highlights (
		## The file containing the highlight regions.
		model.FilePath file
		## The highlight regions contained in the file. Each highlight region represents a particular syntactic or semantic meaning associated with some range. Note that the highlight regions that are returned can overlap other highlight regions if there is more than one meaning associated with a particular region. 
		model.HighlightRegion[] regions
	)
	
	## Reports that the navigation information associated with a region of a single file has become invalid and should be re-requested.
	## This notification is not subscribed to by default. Clients can subscribe by including the value "INVALIDATE" in the list of services passed in an analysis.setSubscriptions request. 
	notification invalidate (
		## The file whose information has been invalidated.
		model.FilePath file
		## The offset of the invalidated region.
		int offset
		## The length of the invalidated region.
		int length
		## The delta to be applied to the offsets in information that follows the invalidated region in order to update it so that it doesn't need to be re-requested.
		int delta
	)
	
	## Reports the navigation targets associated with a given file.
	## This notification is not subscribed to by default. Clients can subscribe by including the value "NAVIGATION" in the list of services passed in an analysis.setSubscriptions request. 
	notification navigation (
		## The file containing the navigation regions.
		model.FilePath file
		## The navigation regions contained in the file. The regions are sorted by their offsets. Each navigation region represents a list of targets associated with some range. The lists will usually contain a single target, but can contain more in the case of a part that is included in multiple libraries or in Dart code that is compiled against multiple versions of a package. Note that the navigation regions that are returned do not overlap other navigation regions. 
		model.NavigationRegion[] regions
		## The navigation targets referenced in the file. They are referenced by NavigationRegions by their index in this array.
		model.NavigationTarget[] targets
		## The files containing navigation targets referenced in the file. They are referenced by NavigationTargets by their index in this array.
		model.FilePath[] files
	)
	
	## Reports the occurrences of references to elements within a single file.
	## This notification is not subscribed to by default. Clients can subscribe by including the value "OCCURRENCES" in the list of services passed in an analysis.setSubscriptions request. 
	notification occurrences(
		## The file in which the references occur.
		model.FilePath file
		## The occurrences of references to elements within the file.
		model.Occurrences[] occurences
	)
	
	## Reports the outline associated with a single file. 
	## This notification is not subscribed to by default. Clients can subscribe by including the value "OUTLINE" in the list of services passed in an analysis.setSubscriptions request. 
	notification outline(
		## The file with which the outline is associated.
		model.FilePath file
		## The outline associated with the file.
		model.Outline outline
	)
	
	## Reports the overridding members in a file. 
	## This notification is not subscribed to by default. Clients can subscribe by including the value "OVERRIDES" in the list of services passed in an analysis.setSubscriptions request. 
	notification overrides(
		## The file with which the overrides are associated.
		model.FilePath file
		## The overrides associated with the file.
		model.Override[] overrides
	)
}

service completion {
	##  Request that completion suggestions for the given offset in the given file be returned. 
	request getSuggestions(
		## The file containing the point at which suggestions are to be made.
		model.FilePath file
		## The offset within the file at which suggestions are to be made.
		int offset
	) returns
		## The identifier used to associate results with this completion request.
		model.CompletionId id
	
	##  Reports the completion suggestions that should be presented to the user. The set of suggestions included in the notification is always a complete list that supersedes any previously reported suggestions. 
	notification results(
		## The id associated with the completion.
		model.CompletionId id
		## The offset of the start of the text to be replaced. This will be different than the offset used to request the completion suggestions if there was a portion of an identifier before the original offset. In particular, the replacementOffset will be the offset of the beginning of said identifier.
		int replacementOffset
		## The length of the text to be replaced if the remainder of the identifier containing the cursor is to be replaced when the suggestion is applied (that is, the number of characters in the existing identifier).
		int replacementLength
		## The completion suggestions being reported. The notification contains all possible completions at the requested cursor position, even those that do not match the characters the user has already typed. This allows the client to respond to further keystrokes from the user without having to make additional requests.
		model.CompletionSuggestion[] results
		## True if this is that last set of results that will be returned for the indicated completion.
		boolean isLast
	)
}

service search {
	## Perform a search for references to the element defined or referenced at the given offset in the given file.
	##  An identifier is returned immediately, and individual results will be returned via the search.results notification as they become available.  
	request findElementReferences(
		## The file containing the declaration of or reference to the element used to define the search.
		model.FilePath file
		## The offset within the file of the declaration of or reference to the element.
		int offset
		## True if potential matches are to be included in the results.
		boolean includePotential
	) returns 
		## The identifier used to associate results with this search request. 
		## If no element was found at the given location, this field will be absent, and no results will be reported via the search.results notification. 
		optional model.SearchId id
		## The element referenced or defined at the given offset and whose references will be returned in the search results.
		## If no element was found at the given location, this field will be absent.  
		optional model.Element element
		
	## Perform a search for declarations of members whose name is equal to the given name. 
	## An identifier is returned immediately, and individual results will be returned via the search.results notification as they become available. 
	request findMemberDeclarations(
		## The name of the declarations to be found.
		java.lang.String name
	)  returns
		## The identifier used to associate results with this search request.
		model.SearchId id
		
	## Perform a search for references to members whose name is equal to the given name. This search does not check to see that there is a member defined with the given name, so it is able to find references to undefined members as well.
	## An identifier is returned immediately, and individual results will be returned via the search.results notification as they become available.  
	request findMemberReferences(
		## The name of the references to be found.
		java.lang.String name
	) returns
		## The identifier used to associate results with this search request.
		model.SearchId id
	
	## Perform a search for declarations of top-level elements (classes, typedefs, getters, setters, functions and fields) whose name matches the given pattern.
	## An identifier is returned immediately, and individual results will be returned via the search.results notification as they become available.  
	request findTopLevelDeclarations(
		## The regular expression used to match the names of the declarations to be found.
		java.lang.String pattern
	) returns
		## The identifier used to associate results with this search request.
		model.SearchId id
	
	## Return the type hierarchy of the class declared or referenced at the given location. 
	request getTypeHierarchy(
		## The file containing the declaration or reference to the type for which a hierarchy is being requested.
		model.FilePath file
		## The offset of the name of the type within the file.
		int offset
	) returns 
		## A list of the types in the requested hierarchy. The first element of the list is the item representing the type for which the hierarchy was requested. The index of other elements of the list is unspecified, but correspond to the integers used to reference supertype and subtype items within the items. 
		##  This field will be absent if the code at the given file and offset does not represent a type, or if the file has not been sufficiently analyzed to allow a type hierarchy to be produced. 
		model.TypeHierarchyItem[] hierarchyItems
	
	## Reports some or all of the results of performing a requested search. Unlike other notifications, this notification contains search results that should be added to any previously received search results associated with the same search id. 
	notification results(
		## The id associated with the search.
		model.SearchId id
		## The search results being reported.
		model.SearchResult results
		## True if this is that last set of results that will be returned for the indicated search.
		boolean isLast
	)
}

service edit {
	## Format the contents of a single file. The currently selected region of text is passed in so that the selection can be preserved across the formatting operation. The updated selection will be as close to matching the original as possible, but whitespace at the beginning or end of the selected region will be ignored. If preserving selection information is not required, zero (0) can be specified for both the selection offset and selection length.
	## If a request is made for a file which does not exist, or which is not currently subject to analysis (e.g. because it is not associated with any analysis root specified to analysis.setAnalysisRoots), an error of type FORMAT_INVALID_FILE will be generated. If the source contains syntax errors, an error of type FORMAT_WITH_ERRORS will be generated.  
	request format(
		## The file containing the code to be formatted.
		model.FilePath file
		## The offset of the current selection in the file.
		int selectionOffset
		## The length of the current selection in the file.
		int selectionLength
	) returns
		## The edit(s) to be applied in order to format the code. The list will be empty if the code was already formatted (there are no changes).
		model.SourceEdit[] edits
		## The offset of the selection after formatting the code.
		int selectionOffset
		## The length of the selection after formatting the code.
		int selectionLength
		
	## Return the set of assists that are available at the given location. An assist is distinguished from a refactoring primarily by the fact that it affects a single file and does not require user input in order to be performed. 		
	request getAssists(
		## The file containing the code for which assists are being requested.
		model.FilePath file
		## The offset of the code for which assists are being requested.
		int offset
		## The length of the code for which assists are being requested.
		int length
	) returns
		## The assists that are available at the given location.
		model.SourceChange[] assists
	
	## Get a list of the kinds of refactorings that are valid for the given selection in the given file. 
	request getAvailableRefactorings(
		## The file containing the code on which the refactoring would be based.
		model.FilePath file
		## The offset of the code on which the refactoring would be based.
		int offset
		## The length of the code on which the refactoring would be based.
		int length
	) returns
		## The kinds of refactorings that are valid for the given selection.
		model.RefactoringKind[] kinds
	
	## Return the set of fixes that are available for the errors at a given offset in a given file. 
	request getFixes(
		## The file containing the errors for which fixes are being requested.
		model.FilePath file
		## The offset used to select the errors for which fixes will be returned.
		int offset
	) returns
		## The fixes that are available for the errors at the given offset.
		model.AnalysisErrorFixes[] fixes
	
	## Get the changes required to perform a refactoring.
	##  If another refactoring request is received during the processing of this one, an error of type REFACTORING_REQUEST_CANCELLED will be generated.  
	request getRefactoring(
		## The kind of refactoring to be performed.
		model.RefactoringKind kind
		## The file containing the code involved in the refactoring.
		model.FilePath file
		## The offset of the region involved in the refactoring.
		int offset
		## The length of the region involved in the refactoring.
		int length
		## True if the client is only requesting that the values of the options be validated and no change be generated.
		int validateOnly
		## Data used to provide values provided by the user. The structure of the data is dependent on the kind of refactoring being performed. The data that is expected is documented in the section titled Refactorings, labeled as “Options”. This field can be omitted if the refactoring does not require any options or if the values of those options are not known.
		optional model.RefactoringOptions options
	) returns
		## The initial status of the refactoring, i.e. problems related to the context in which the refactoring is requested. The array will be empty if there are no known problems.
		model.RefactoringProblem[] initialProblems
		## The options validation status, i.e. problems in the given options, such as light-weight validation of a new name, flags compatibility, etc. The array will be empty if there are no known problems.
		model.RefactoringProblem[] optionsProblems
		## The final status of the refactoring, i.e. problems identified in the result of a full, potentially expensive validation and / or change creation. The array will be empty if there are no known problems.
		model.RefactoringProblem[] finalProblems
		## Data used to provide feedback to the user. The structure of the data is dependent on the kind of refactoring being created. The data that is returned is documented in the section titled Refactorings, labeled as “Feedback”.
		optional model.RefactoringFeedback feedback
		## The changes that are to be applied to affect the refactoring. This field will be omitted if there are problems that prevent a set of changes from being computed, such as having no options specified for a refactoring that requires them, or if only validation was requested.
		optional model.SourceChange change
		## The ids of source edits that are not known to be valid. An edit is not known to be valid if there was insufficient type information for the server to be able to determine whether or not the code needs to be modified, such as when a member is being renamed and there is a reference to a member from an unknown type. This field will be omitted if the change field is omitted or if there are no potential edits for the refactoring.
		optional java.lang.String[] potentialEdits
	
	## Sort all of the directives, unit and class members of the given Dart file. 
	## If a request is made for a file that does not exist, does not belong to an analysis root or is not a Dart file, SORT_MEMBERS_INVALID_FILE will be generated. 
	## If the Dart file has scan or parse errors, SORT_MEMBERS_PARSE_ERRORS will be generated. 
	request sortMembers(
		## The Dart file to sort.
		model.FilePath file
	) returns
		## The file edit that is to be applied to the given file to effect the sorting.
		model.SourceFileEdit edit
}

service execution {
	##  Create an execution context for the executable file with the given path. The context that is created will persist until execution.deleteContext is used to delete it. Clients, therefore, are responsible for managing the lifetime of execution contexts. 
	request createContext(
		## The path of the Dart or HTML file that will be launched, or the path of the directory containing the file.
		model.FilePath contextRoot
	) returns
		## The identifier used to refer to the execution context that was created.
		model.ExecutionContextId id
	
	## Delete the execution context with the given identifier. The context id is no longer valid after this command. The server is allowed to re-use ids when they are no longer valid. 
	request deleteContext(
		## The identifier of the execution context that is to be deleted.
		model.ExecutionContextId id
	) returns void
	
	## Map a URI from the execution context to the file that it corresponds to, or map a file to the URI that it corresponds to in the execution context. 
	## Exactly one of the file and uri fields must be provided. If both fields are provided, then an error of type INVALID_PARAMETER will be generated. Similarly, if neither field is provided, then an error of type INVALID_PARAMETER will be generated. 
	## If the file field is provided and the value is not the path of a file (either the file does not exist or the path references something other than a file), then an error of type INVALID_PARAMETER will be generated. 
	## If the uri field is provided and the value is not a valid URI or if the URI references something that is not a file (either a file that does not exist or something other than a file), then an error of type INVALID_PARAMETER will be generated. 
	## If the contextRoot used to create the execution context does not exist, then an error of type INVALID_EXECUTION_CONTEXT will be generated. 
	request mapUri(
		## The identifier of the execution context in which the URI is to be mapped.
		model.ExecutionContextId id
		## The path of the file to be mapped into a URI.
		optional model.FilePath file
		## The URI to be mapped into a file path.
		optional java.lang.String uri
	) returns
		## The file to which the URI was mapped. This field is omitted if the uri field was not given in the request.
		optional model.FilePath file
		## The URI to which the file path was mapped. This field is omitted if the file field was not given in the request.
		optional java.lang.String uri
	
	## Subscribe for services. All previous subscriptions are replaced by the given set of services. 
	## It is an error if any of the elements in the list are not valid services. If there is an error, then the current subscriptions will remain unchanged. 	
	request setSubscriptions(
		## A list of the services being subscribed to.
		model.ExecutionService[] subscriptions
	) returns void
	
	## Reports information needed to allow a single file to be launched. 
	## This notification is not subscribed to by default. Clients can subscribe by including the value "LAUNCH_DATA" in the list of services passed in an execution.setSubscriptions request. 
	notification launchData(
		## The file for which launch data is being provided. This will either be a Dart library or an HTML file.
		model.FilePath file
		## The kind of the executable file. This field is omitted if the file is not a Dart file.
		optional model.ExecutableKind kind
		## A list of the Dart files that are referenced by the file. This field is omitted if the file is not an HTML file.
		optional model.FilePath[] referencedFiles
	)
}
