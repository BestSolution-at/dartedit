/*
 * generated by Xtext
 */
package at.bestsolution.dart.service.spec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DartServiceSpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ServiceDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cDomainElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainElementsDomainElementParserRuleCall_2_0 = (RuleCall)cDomainElementsAssignment_2.eContents().get(0);
		private final Assignment cServiceDefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServiceDefsServiceDefParserRuleCall_3_0 = (RuleCall)cServiceDefsAssignment_3.eContents().get(0);
		
		//ServiceDefs:
		//	"package" packageName=QualifiedName domainElements+=DomainElement* serviceDefs+=ServiceDef+;
		@Override public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName domainElements+=DomainElement* serviceDefs+=ServiceDef+
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//domainElements+=DomainElement*
		public Assignment getDomainElementsAssignment_2() { return cDomainElementsAssignment_2; }

		//DomainElement
		public RuleCall getDomainElementsDomainElementParserRuleCall_2_0() { return cDomainElementsDomainElementParserRuleCall_2_0; }

		//serviceDefs+=ServiceDef+
		public Assignment getServiceDefsAssignment_3() { return cServiceDefsAssignment_3; }

		//ServiceDef
		public RuleCall getServiceDefsServiceDefParserRuleCall_3_0() { return cServiceDefsServiceDefParserRuleCall_3_0; }
	}

	public class DomainElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cJavatypeKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cCustAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cCustCustKeyword_1_1_0_0 = (Keyword)cCustAssignment_1_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cExtendsKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final CrossReference cSuperTypeDomainElementCrossReference_1_1_2_1_0 = (CrossReference)cSuperTypeAssignment_1_1_2_1.eContents().get(0);
		private final RuleCall cSuperTypeDomainElementQualifiedNameParserRuleCall_1_1_2_1_0_1 = (RuleCall)cSuperTypeDomainElementCrossReference_1_1_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cAttributesAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_1_1_4_0 = (RuleCall)cAttributesAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cEnumKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_2_1_0 = (RuleCall)cNameAssignment_1_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cEnumValuesAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cEnumValuesEnumValParserRuleCall_1_2_3_0 = (RuleCall)cEnumValuesAssignment_1_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cAliasKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cNameAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_3_1_0 = (RuleCall)cNameAssignment_1_3_1.eContents().get(0);
		private final Keyword cAsKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cRealTypeAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cRealTypeQualifiedNameParserRuleCall_1_3_3_0 = (RuleCall)cRealTypeAssignment_1_3_3.eContents().get(0);
		
		//DomainElement:
		//	doc+=DOC* ("javatype" name=QualifiedName | cust?="cust" name=QualifiedName ("extends"
		//	superType=[DomainElement|QualifiedName])? "{" attributes+=Attribute* "}" | "enum" name=QualifiedName "("
		//	enumValues+=EnumVal* ")" | "alias" name=QualifiedName "as" realType=QualifiedName);
		@Override public ParserRule getRule() { return rule; }

		//doc+=DOC* ("javatype" name=QualifiedName | cust?="cust" name=QualifiedName ("extends"
		//superType=[DomainElement|QualifiedName])? "{" attributes+=Attribute* "}" | "enum" name=QualifiedName "("
		//enumValues+=EnumVal* ")" | "alias" name=QualifiedName "as" realType=QualifiedName)
		public Group getGroup() { return cGroup; }

		//doc+=DOC*
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"javatype" name=QualifiedName | cust?="cust" name=QualifiedName ("extends" superType=[DomainElement|QualifiedName])? "{"
		//attributes+=Attribute* "}" | "enum" name=QualifiedName "(" enumValues+=EnumVal* ")" | "alias" name=QualifiedName "as"
		//realType=QualifiedName
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"javatype" name=QualifiedName
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"javatype"
		public Keyword getJavatypeKeyword_1_0_0() { return cJavatypeKeyword_1_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_1_0() { return cNameQualifiedNameParserRuleCall_1_0_1_0; }

		//cust?="cust" name=QualifiedName ("extends" superType=[DomainElement|QualifiedName])? "{" attributes+=Attribute* "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//cust?="cust"
		public Assignment getCustAssignment_1_1_0() { return cCustAssignment_1_1_0; }

		//"cust"
		public Keyword getCustCustKeyword_1_1_0_0() { return cCustCustKeyword_1_1_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_1_1_0() { return cNameQualifiedNameParserRuleCall_1_1_1_0; }

		//("extends" superType=[DomainElement|QualifiedName])?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"extends"
		public Keyword getExtendsKeyword_1_1_2_0() { return cExtendsKeyword_1_1_2_0; }

		//superType=[DomainElement|QualifiedName]
		public Assignment getSuperTypeAssignment_1_1_2_1() { return cSuperTypeAssignment_1_1_2_1; }

		//[DomainElement|QualifiedName]
		public CrossReference getSuperTypeDomainElementCrossReference_1_1_2_1_0() { return cSuperTypeDomainElementCrossReference_1_1_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeDomainElementQualifiedNameParserRuleCall_1_1_2_1_0_1() { return cSuperTypeDomainElementQualifiedNameParserRuleCall_1_1_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_3() { return cLeftCurlyBracketKeyword_1_1_3; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1_1_4() { return cAttributesAssignment_1_1_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_1_4_0() { return cAttributesAttributeParserRuleCall_1_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_5() { return cRightCurlyBracketKeyword_1_1_5; }

		//"enum" name=QualifiedName "(" enumValues+=EnumVal* ")"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"enum"
		public Keyword getEnumKeyword_1_2_0() { return cEnumKeyword_1_2_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_2_1() { return cNameAssignment_1_2_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_2_1_0() { return cNameQualifiedNameParserRuleCall_1_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_2() { return cLeftParenthesisKeyword_1_2_2; }

		//enumValues+=EnumVal*
		public Assignment getEnumValuesAssignment_1_2_3() { return cEnumValuesAssignment_1_2_3; }

		//EnumVal
		public RuleCall getEnumValuesEnumValParserRuleCall_1_2_3_0() { return cEnumValuesEnumValParserRuleCall_1_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_4() { return cRightParenthesisKeyword_1_2_4; }

		//"alias" name=QualifiedName "as" realType=QualifiedName
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"alias"
		public Keyword getAliasKeyword_1_3_0() { return cAliasKeyword_1_3_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_3_1() { return cNameAssignment_1_3_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_3_1_0() { return cNameQualifiedNameParserRuleCall_1_3_1_0; }

		//"as"
		public Keyword getAsKeyword_1_3_2() { return cAsKeyword_1_3_2; }

		//realType=QualifiedName
		public Assignment getRealTypeAssignment_1_3_3() { return cRealTypeAssignment_1_3_3; }

		//QualifiedName
		public RuleCall getRealTypeQualifiedNameParserRuleCall_1_3_3_0() { return cRealTypeQualifiedNameParserRuleCall_1_3_3_0; }
	}

	public class EnumValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumVal:
		//	doc+=DOC* name=ID;
		@Override public ParserRule getRule() { return rule; }

		//doc+=DOC* name=ID
		public Group getGroup() { return cGroup; }

		//doc+=DOC*
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGenericTypeArgumentParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//Attribute:
		//	documentation+=DOC* optional?="optional"? type=GenericTypeArgument name=ID ("=" value=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOC* optional?="optional"? type=GenericTypeArgument name=ID ("=" value=STRING)?
		public Group getGroup() { return cGroup; }

		//documentation+=DOC*
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC
		public RuleCall getDocumentationDOCTerminalRuleCall_0_0() { return cDocumentationDOCTerminalRuleCall_0_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_1_0() { return cOptionalOptionalKeyword_1_0; }

		//type=GenericTypeArgument
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//GenericTypeArgument
		public RuleCall getTypeGenericTypeArgumentParserRuleCall_2_0() { return cTypeGenericTypeArgumentParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("=" value=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//value=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }
	}

	public class GenericTypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericTypeArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDomainElementCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeDomainElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeDomainElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsGenericTypeArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsGenericTypeArgumentParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cListLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cListAssignment_2.eContents().get(0);
		
		//GenericTypeArgument:
		//	type=[DomainElement|QualifiedName] ("<" arguments+=GenericTypeArgument ("," arguments+=GenericTypeArgument)* ">")?
		//	list?="[]"?;
		@Override public ParserRule getRule() { return rule; }

		//type=[DomainElement|QualifiedName] ("<" arguments+=GenericTypeArgument ("," arguments+=GenericTypeArgument)* ">")?
		//list?="[]"?
		public Group getGroup() { return cGroup; }

		//type=[DomainElement|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[DomainElement|QualifiedName]
		public CrossReference getTypeDomainElementCrossReference_0_0() { return cTypeDomainElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeDomainElementQualifiedNameParserRuleCall_0_0_1() { return cTypeDomainElementQualifiedNameParserRuleCall_0_0_1; }

		//("<" arguments+=GenericTypeArgument ("," arguments+=GenericTypeArgument)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//arguments+=GenericTypeArgument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//GenericTypeArgument
		public RuleCall getArgumentsGenericTypeArgumentParserRuleCall_1_1_0() { return cArgumentsGenericTypeArgumentParserRuleCall_1_1_0; }

		//("," arguments+=GenericTypeArgument)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=GenericTypeArgument
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//GenericTypeArgument
		public RuleCall getArgumentsGenericTypeArgumentParserRuleCall_1_2_1_0() { return cArgumentsGenericTypeArgumentParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//list?="[]"?
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//"[]"
		public Keyword getListLeftSquareBracketRightSquareBracketKeyword_2_0() { return cListLeftSquareBracketRightSquareBracketKeyword_2_0; }
	}

	public class ServiceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cServiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequestsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequestsRequestParserRuleCall_4_0 = (RuleCall)cRequestsAssignment_4.eContents().get(0);
		private final Assignment cNotificationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotificationsNotificationParserRuleCall_5_0 = (RuleCall)cNotificationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ServiceDef:
		//	documentation+=DOC* "service" name=ID "{" requests+=Request* notifications+=Notification* "}";
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOC* "service" name=ID "{" requests+=Request* notifications+=Notification* "}"
		public Group getGroup() { return cGroup; }

		//documentation+=DOC*
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC
		public RuleCall getDocumentationDOCTerminalRuleCall_0_0() { return cDocumentationDOCTerminalRuleCall_0_0; }

		//"service"
		public Keyword getServiceKeyword_1() { return cServiceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//requests+=Request*
		public Assignment getRequestsAssignment_4() { return cRequestsAssignment_4; }

		//Request
		public RuleCall getRequestsRequestParserRuleCall_4_0() { return cRequestsRequestParserRuleCall_4_0; }

		//notifications+=Notification*
		public Assignment getNotificationsAssignment_5() { return cNotificationsAssignment_5; }

		//Notification
		public RuleCall getNotificationsNotificationParserRuleCall_5_0() { return cNotificationsNotificationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cRequestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cReturnsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cVoidKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cReturnValsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cReturnValsAttributeParserRuleCall_5_1_0 = (RuleCall)cReturnValsAssignment_5_1.eContents().get(0);
		
		//Request:
		//	documentation+=DOC* "request" name=ID ("(" attributes+=Attribute+ ")")? "returns" ("void" | returnVals+=Attribute+);
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOC* "request" name=ID ("(" attributes+=Attribute+ ")")? "returns" ("void" | returnVals+=Attribute+)
		public Group getGroup() { return cGroup; }

		//documentation+=DOC*
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC
		public RuleCall getDocumentationDOCTerminalRuleCall_0_0() { return cDocumentationDOCTerminalRuleCall_0_0; }

		//"request"
		public Keyword getRequestKeyword_1() { return cRequestKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" attributes+=Attribute+ ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0() { return cAttributesAttributeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//"returns"
		public Keyword getReturnsKeyword_4() { return cReturnsKeyword_4; }

		//"void" | returnVals+=Attribute+
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"void"
		public Keyword getVoidKeyword_5_0() { return cVoidKeyword_5_0; }

		//returnVals+=Attribute+
		public Assignment getReturnValsAssignment_5_1() { return cReturnValsAssignment_5_1; }

		//Attribute
		public RuleCall getReturnValsAttributeParserRuleCall_5_1_0() { return cReturnValsAttributeParserRuleCall_5_1_0; }
	}

	public class NotificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Notification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cNotificationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Notification:
		//	documentation+=DOC* "notification" name=ID ("(" attributes+=Attribute+ ")")?;
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOC* "notification" name=ID ("(" attributes+=Attribute+ ")")?
		public Group getGroup() { return cGroup; }

		//documentation+=DOC*
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC
		public RuleCall getDocumentationDOCTerminalRuleCall_0_0() { return cDocumentationDOCTerminalRuleCall_0_0; }

		//"notification"
		public Keyword getNotificationKeyword_1() { return cNotificationKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" attributes+=Attribute+ ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0() { return cAttributesAttributeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ServiceDefsElements pServiceDefs;
	private final DomainElementElements pDomainElement;
	private final EnumValElements pEnumVal;
	private final AttributeElements pAttribute;
	private final GenericTypeArgumentElements pGenericTypeArgument;
	private final ServiceDefElements pServiceDef;
	private final RequestElements pRequest;
	private final NotificationElements pNotification;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tDOC;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DartServiceSpecGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pServiceDefs = new ServiceDefsElements();
		this.pDomainElement = new DomainElementElements();
		this.pEnumVal = new EnumValElements();
		this.pAttribute = new AttributeElements();
		this.pGenericTypeArgument = new GenericTypeArgumentElements();
		this.pServiceDef = new ServiceDefElements();
		this.pRequest = new RequestElements();
		this.pNotification = new NotificationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tDOC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOC");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.bestsolution.dart.service.spec.DartServiceSpec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ServiceDefs:
	//	"package" packageName=QualifiedName domainElements+=DomainElement* serviceDefs+=ServiceDef+;
	public ServiceDefsElements getServiceDefsAccess() {
		return pServiceDefs;
	}
	
	public ParserRule getServiceDefsRule() {
		return getServiceDefsAccess().getRule();
	}

	//DomainElement:
	//	doc+=DOC* ("javatype" name=QualifiedName | cust?="cust" name=QualifiedName ("extends"
	//	superType=[DomainElement|QualifiedName])? "{" attributes+=Attribute* "}" | "enum" name=QualifiedName "("
	//	enumValues+=EnumVal* ")" | "alias" name=QualifiedName "as" realType=QualifiedName);
	public DomainElementElements getDomainElementAccess() {
		return pDomainElement;
	}
	
	public ParserRule getDomainElementRule() {
		return getDomainElementAccess().getRule();
	}

	//EnumVal:
	//	doc+=DOC* name=ID;
	public EnumValElements getEnumValAccess() {
		return pEnumVal;
	}
	
	public ParserRule getEnumValRule() {
		return getEnumValAccess().getRule();
	}

	//Attribute:
	//	documentation+=DOC* optional?="optional"? type=GenericTypeArgument name=ID ("=" value=STRING)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//GenericTypeArgument:
	//	type=[DomainElement|QualifiedName] ("<" arguments+=GenericTypeArgument ("," arguments+=GenericTypeArgument)* ">")?
	//	list?="[]"?;
	public GenericTypeArgumentElements getGenericTypeArgumentAccess() {
		return pGenericTypeArgument;
	}
	
	public ParserRule getGenericTypeArgumentRule() {
		return getGenericTypeArgumentAccess().getRule();
	}

	//ServiceDef:
	//	documentation+=DOC* "service" name=ID "{" requests+=Request* notifications+=Notification* "}";
	public ServiceDefElements getServiceDefAccess() {
		return pServiceDef;
	}
	
	public ParserRule getServiceDefRule() {
		return getServiceDefAccess().getRule();
	}

	//Request:
	//	documentation+=DOC* "request" name=ID ("(" attributes+=Attribute+ ")")? "returns" ("void" | returnVals+=Attribute+);
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}

	//Notification:
	//	documentation+=DOC* "notification" name=ID ("(" attributes+=Attribute+ ")")?;
	public NotificationElements getNotificationAccess() {
		return pNotification;
	}
	
	public ParserRule getNotificationRule() {
		return getNotificationAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal DOC:
	//	"##" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getDOCRule() {
		return tDOC;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
