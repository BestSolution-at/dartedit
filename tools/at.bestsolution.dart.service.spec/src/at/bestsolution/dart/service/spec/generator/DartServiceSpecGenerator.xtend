/*
 * generated by Xtext 2.9.0.v201505180813
 */
package at.bestsolution.dart.service.spec.generator

import at.bestsolution.dart.service.spec.dartServiceSpec.DomainElement
import at.bestsolution.dart.service.spec.dartServiceSpec.GenericTypeArgument
import at.bestsolution.dart.service.spec.dartServiceSpec.Notification
import at.bestsolution.dart.service.spec.dartServiceSpec.Request
import at.bestsolution.dart.service.spec.dartServiceSpec.ServiceDef
import at.bestsolution.dart.service.spec.dartServiceSpec.ServiceDefs
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import java.util.concurrent.ExecutionException

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DartServiceSpecGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' +
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
		val defs = resource.contents.head as ServiceDefs

		fsa.generateFile((defs.packageName+".internal.local.LocalDartServer").replace('.','/')+".java", defs.generateLocalServer)

		defs.domainElements.filter[! enumValues.empty].forEach[
			fsa.generateFile((defs.packageName+"."+name).replace('.','/')+".java", generateEnumType)
		]
		defs.domainElements.filter[cust].forEach[
			fsa.generateFile((defs.packageName+"."+name).replace('.','/')+".java", generateCustType)
		]
		defs.serviceDefs.forEach[s|
			s.notifications.forEach[n|
				fsa.generateFile((defs.packageName+".model."+s.name.toFirstUpper+n.name.toFirstUpper+"Notification").replace('.','/')+".java", n.generateNotificationType)
			]
			fsa.generateFile((defs.packageName+".internal.local.Local"+s.name.toFirstUpper+"Service").replace(".","/")+".java", s.generateLocalService)
		]
		defs.serviceDefs.forEach[s|
			s.requests.filter[!returnVals.empty].forEach[r|
				fsa.generateFile((defs.packageName+".model."+s.name.toFirstUpper+r.name.toFirstUpper+"Result").replace('.','/')+".java", r.generateRequestResultType)
			]
			s.requests.filter[!attributes.empty].forEach[r|
				fsa.generateFile((defs.packageName+".model."+s.name.toFirstUpper+r.name.toFirstUpper+"Request").replace('.','/')+".java", r.generateRequestType)
			]
		]

		defs.serviceDefs.forEach[s|
			fsa.generateFile((defs.packageName+".services.Service"+s.name.toFirstUpper).replace('.','/')+".java", s.generateServiceAPI)
		]
	}

	def generateLocalService(ServiceDef d) '''
	package at.bestsolution.dart.server.api.internal.local;

	import com.google.gson.JsonObject;
	import com.google.gson.Gson;
	import java.util.concurrent.ExecutionException;
	import at.bestsolution.dart.server.api.RequestErrorException;
	import java.util.List;
	import java.util.ArrayList;
	import at.bestsolution.dart.server.api.model.*;
	import java.util.Map;

	public class Local«d.name.toFirstUpper»Service implements at.bestsolution.dart.server.api.services.Service«d.name.toFirstUpper» {

		private final LocalDartServer server;
		«FOR n : d.notifications»
		private final List<java.util.function.Consumer<«(n.eContainer.eContainer as ServiceDefs).packageName».model.«(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification>> «n.name»ConsumerList = new ArrayList<>();
		«ENDFOR»

		public Local«d.name.toFirstUpper»Service(LocalDartServer server) {
			this.server = server;
		}

		public void dispatchEvent(JsonObject root) {
			switch(root.get("event").getAsString()) {
				«FOR n : d.notifications»
					case "«d.name».«n.name»": {
						«(n.eContainer.eContainer as ServiceDefs).packageName».model.«(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification o = new Gson().fromJson(root.get("params"), «(n.eContainer.eContainer as ServiceDefs).packageName».model.«(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification.class);
						List<java.util.function.Consumer<«(n.eContainer.eContainer as ServiceDefs).packageName».model.«(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification>> l;
						synchronized(«n.name»ConsumerList) {
							l = new ArrayList<>(«n.name»ConsumerList);
						}
						l.stream().forEach( c -> c.accept(o));
						break;
					}
				«ENDFOR»
			}
		}

		// Requests
		«FOR req : d.requests»
			public «IF req.returnVals.empty»void«ELSE»«(d.eContainer as ServiceDefs).packageName».model.«(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Result«ENDIF» «req.name»(«req.attributes.map[type.typeString + " " + name].join(",")») {
				try {
					JsonObject o = server.sendRequest( "«d.name».«req.name»", «IF req.attributes.empty»null«ELSE»new «(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Request(«req.attributes.map[name].join(", ")»)«ENDIF»).get();
					if( o.has("error") ) {
						throw new RequestErrorException(new Gson().fromJson(o.get("error"), at.bestsolution.dart.server.api.model.RequestError.class));
					}
					«IF ! req.returnVals.empty»
						if( o.has("result") ) {
							return new Gson().fromJson(o.get("result"), «(d.eContainer as ServiceDefs).packageName».model.«(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Result.class);
						}
						throw new IllegalStateException("The request did not return a result");
					«ENDIF»
				} catch (InterruptedException | ExecutionException e) {
					throw new IllegalStateException(e);
				}
			}
		«ENDFOR»

		// Notifications
		«FOR n : d.notifications»
			public at.bestsolution.dart.server.api.Registration «n.name»( java.util.function.Consumer<«(n.eContainer.eContainer as ServiceDefs).packageName».model.«(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification> consumer) {
				synchronized(«n.name»ConsumerList) {
					«n.name»ConsumerList.add(consumer);
				}
				return () -> {
					synchronized(«n.name»ConsumerList) {
						«n.name»ConsumerList.remove(consumer);
					}
				};
			}
		«ENDFOR»
	}
	'''

	def generateLocalServer(ServiceDefs defs) '''
	package at.bestsolution.dart.server.api.internal.local;

	import java.io.BufferedReader;
	import java.io.IOException;
	import java.io.InputStreamReader;
	import java.util.Map;
	import java.util.HashMap;
	import java.util.concurrent.Future;
	import java.util.concurrent.CompletableFuture;
	import java.util.concurrent.atomic.AtomicInteger;

	import at.bestsolution.dart.server.api.DartService;

	import com.google.gson.JsonParser;
	import com.google.gson.JsonObject;
	import com.google.gson.Gson;

	public class LocalDartServer implements at.bestsolution.dart.server.api.DartServer {
		private final String id;
		private Process p;
		private Map<String,CompletableFuture<JsonObject>> waitingResponseConsumerMap = new HashMap<>();

		private AtomicInteger requestCount = new AtomicInteger();

		«FOR s : defs.serviceDefs»
		private Local«s.name.toFirstUpper»Service «s.name»Service;
		«ENDFOR»

		public LocalDartServer(String id) {
			this.id = id;
			try {
				p = Runtime.getRuntime().exec("/Users/tomschindl/Downloads/dart-sdk/bin/dart /Users/tomschindl/Downloads/dart-sdk/bin/snapshots/analysis_server.dart.snapshot");

				Thread t = new Thread() {
					public void run() {
						try {
							BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
							String l = null;
							while( (l = r.readLine()) != null ) {
								dispatch(l);
							}
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				};
				t.start();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

		public Future<JsonObject> sendRequest(String method, Object request) {
			if( p.isAlive() ) {
				String requestId = id + "_" + requestCount.incrementAndGet();
				CompletableFuture<JsonObject> f = new CompletableFuture<>();
				synchronized(waitingResponseConsumerMap) {
					waitingResponseConsumerMap.put(requestId, f);
				}

				synchronized (p) {
					String r = "{ \"id\" : \"" + requestId + "\", \"method\" : \""+method+"\" ";
					if( request != null ) {
						r += ", \"params\" :  " + new Gson().toJson(request);
					}
					r += "}";
					r = r.replace('\n', ' ');
					r = r.replace('\r', ' ');
					r += "\n";
					try {
						System.err.println("Sending: " + r);
						p.getOutputStream().write(r.getBytes());
						p.getOutputStream().flush();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				return f;
			}
			return null;
		}

		public String getId() {
			return this.id;
		}

		private void dispatch(String input) {
			System.err.println("Dart Server message: " + input);
			JsonParser p = new JsonParser();
			JsonObject root = (JsonObject) p.parse(input);

			if( root.has("event") ) {
				String eventTarget = root.get("event").getAsString();
				switch(eventTarget.substring(0,eventTarget.indexOf("."))) {
					«FOR s : defs.serviceDefs»
					case "«s.name»":
					{
						if( «s.name»Service != null ) {
							«s.name»Service.dispatchEvent(root);
						}
						break;
					}
					«ENDFOR»
				}
			} else if( root.has("id") ) {
				String id = root.get("id").getAsString();
				CompletableFuture<JsonObject> future;
				synchronized(waitingResponseConsumerMap) {
					future = waitingResponseConsumerMap.remove(id);
				}

				if( future != null ) {
					future.complete(root);
				}
			}
		}

		@Override
		@SuppressWarnings("unchecked")
		public <S extends DartService> S getService(Class<S> serviceType) {
			«FOR s : defs.serviceDefs»
			if( serviceType == at.bestsolution.dart.server.api.services.Service«s.name.toFirstUpper».class ) {
				if( «s.name»Service == null ) {
					«s.name»Service = new Local«s.name.toFirstUpper»Service(this);
				}
				return (S) «s.name»Service;
			}
			«ENDFOR»
			return null;
		}
	}

	'''

	def generateServiceAPI(ServiceDef d) '''
	package «(d.eContainer as ServiceDefs).packageName».services;

	import at.bestsolution.dart.server.api.model.*;
	import java.util.Map;

	public interface Service«d.name.toFirstUpper» extends at.bestsolution.dart.server.api.DartService {
		// Requests
		«FOR req : d.requests»
		public «IF req.returnVals.empty»void«ELSE»«(d.eContainer as ServiceDefs).packageName».model.«(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Result«ENDIF» «req.name»(«req.attributes.map[type.typeString + " " + name].join(",")»);
		«ENDFOR»

		// Notifications
		«FOR n : d.notifications»
		public at.bestsolution.dart.server.api.Registration «n.name»( java.util.function.Consumer<«(n.eContainer.eContainer as ServiceDefs).packageName».model.«(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification> consumer);
		«ENDFOR»
	}
	'''

	def generateRequestResultType(Request req) '''
	package «(req.eContainer.eContainer as ServiceDefs).packageName».model;

	import java.util.Map;

	public class «(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Result {
		«FOR a : req.returnVals»
			private «a.type.typeString» «a.name.simpleName»;
		«ENDFOR»

		public «(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Result() {
		}

		«FOR a : req.returnVals»
			public «a.type.typeString» get«a.name.simpleName.toFirstUpper»() {
				return this.«a.name.simpleName»;
			}

			public void set«a.name.simpleName.toFirstUpper»(«a.type.typeString» «a.name.simpleName») {
				this.«a.name.simpleName» = «a.name.simpleName»;
			}
		«ENDFOR»
	}
	'''

	def generateRequestType(Request req) '''
	package «(req.eContainer.eContainer as ServiceDefs).packageName».model;

	import java.util.Map;

	public class «(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Request {
		«FOR a : req.attributes»
			private «a.type.typeString» «a.name.simpleName»;
		«ENDFOR»

		public «(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Request() {
		}

		public «(req.eContainer as ServiceDef).name.toFirstUpper»«req.name.toFirstUpper»Request(«req.attributes.map[type.typeString + " " + name].join(",")») {
			«FOR a : req.attributes»
				this.«a.name.simpleName» = «a.name.simpleName»;
			«ENDFOR»
		}

		«FOR a : req.attributes»
			public «a.type.typeString» get«a.name.simpleName.toFirstUpper»() {
				return this.«a.name.simpleName»;
			}

			public void set«a.name.simpleName.toFirstUpper»(«a.type.typeString» «a.name.simpleName») {
				this.«a.name.simpleName» = «a.name.simpleName»;
			}
		«ENDFOR»
	}
	'''


	def generateNotificationType(Notification n) '''
	package «(n.eContainer.eContainer as ServiceDefs).packageName».model;

	import java.util.Map;

	public class «(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification {
		«FOR a : n.attributes»
			private «a.type.typeString» «a.name.simpleName»;
		«ENDFOR»

		public «(n.eContainer as ServiceDef).name.toFirstUpper»«n.name.toFirstUpper»Notification() {
		}

		«FOR a : n.attributes»
			public «a.type.typeString» get«a.name.simpleName.toFirstUpper»() {
				return this.«a.name.simpleName»;
			}

			public void set«a.name.simpleName.toFirstUpper»(«a.type.typeString» «a.name.simpleName») {
				this.«a.name.simpleName» = «a.name.simpleName»;
			}
		«ENDFOR»
	}
	'''

	def generateEnumType(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))»;

	public enum «e.name.simpleName» {
		«FOR en : e.enumValues»
			«IF e.enumValues.head != en»,«ENDIF»«en.name»
		«ENDFOR»
	}
	'''

	def generateCustType(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))»;

	import java.util.Map;

	public class «e.name.simpleName» «IF e.superType != null»extends «e.superType.name.simpleName»«ENDIF» {
		«FOR a : e.attributes»
			private «a.type.typeString» «a.name.simpleName» «IF a.value != null» = «a.value»«ENDIF»;
		«ENDFOR»

		public «e.name.simpleName»() {
		}

		«FOR a : e.attributes»
			public «a.type.typeString» get«a.name.simpleName.toFirstUpper»() {
				return this.«a.name.simpleName»;
			}

			public void set«a.name.simpleName.toFirstUpper»(«a.type.typeString» «a.name.simpleName») {
				this.«a.name.simpleName» = «a.name.simpleName»;
			}
		«ENDFOR»

		public String toString() {
			return "«e.name.simpleName»@"+hashCode()+"[«e.attributes.map[name + ' = "+'+name+'+"'].join(", ")»]";
		}
	}
	'''

	def String typeString(GenericTypeArgument type) {
		var name = type.type.name.simpleName;

		if( type.type.realType != null) {
			name = type.type.realType
		}

		if( ! type.arguments.empty ) {
			var rv = name
			if( ! type.arguments.empty ) {
				rv += "<"
				rv += type.arguments.map[typeString].join(",")
				rv += ">"
			}
			if( type.list ) {
				rv += "[]"
			}
			return rv
		} else {
			var rv = name;
			if( type.list ) {
				rv += "[]"
			}
			return rv
		}
	}

	def simpleName(String name) {
		if( name.indexOf('.') == -1 ) {
			return name
		} else {
			return name.substring(name.lastIndexOf('.')+1)
		}
	}
}
